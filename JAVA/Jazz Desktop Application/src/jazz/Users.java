/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jazz;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

/**
 * This is the class that is going to hold the data necessary to register into this system. 
 * @author 2020-CS-63
 * @author 2020-CS-72
 */
public class Users {
    
    private String username;        //this will be the user defined name
    
    private String cnic;            //user's cnic
    
    private String contact;             //user's contact number
    
    private String email;           //user's email      
    
    private int logins;             //number of times the user has logged into the system.
    
    private int TPN;                // system generated TPN code.

    /**
     * This is a getter for the username that will be entered by the user
     * @return String containing that particular username 
     */
    public String getUsername() {
        return username;
    }

    /**
     * This is a getter for the cnic that will be entered by the user
     * @return String containing that particular cnic of the user
     */
    public String getCnic() {
        return cnic;
    }

    
    /**
     * This is a getter for the contact number that will be entered by the user
     * @return String containing that particular contact number of the user
     */
    public String getContact() {
        return contact;
    }

    /**
     * This is a getter for the email that will be entered by the user
     * @return String containing that particular email of the user
     */
    public String getEmail() {
        return email;
    }

    /**
     * This is the getter for the login calculation/count of the user
     * @return int containing the count that user has been activated.
     */
    public int getLogins() {
        return logins;
    }

    /**
     * This is a getter for the TPN that has either been generated by the system or had been editted by the user 
     * @return int containing the TPN of the user.
     */
    public int getTPN() {
        return TPN;
    }
    
    public void setFTPN(int tpn) {
        TPN=tpn;
        
    }
      
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            //  GETTER FOR FILE HANDLING
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
    
    public void setFUsername(String username,int i) {
        this.username = username;
    }

    public void setFCnic(String cnic, int i) {
        this.cnic = cnic;
    }

    public void setFContact(String contact, int i) {
        this.contact = contact;
    }

    public void setFEmail(String email, int i) {
        this.email = email;
    }

    public void setFLogins(int logins, int i) {
        this.logins = logins;
    }

    public void setFTPN(int TPN, int i) {
        this.TPN = TPN;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            //  GETTER FOR FILE HANDLING
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
    
    /**
     * This is a setter for the username of the user. First the username will be validated that either it is
     * a name with only letters and spaces or something else. Basis on the result the data is set to the variable.
     * @param name String that has been entered by the user on the GUI form while registering himself up.
     * @return Boolean returns true if the name is valid name else returns false 
     */
     public boolean setUsername(String name) {
        int size=name.length();
        boolean flag=false;
        for(int i=0;i<size;i++)
        {
            if((name.charAt(i)>='A' && name.charAt(i)<='Z')||(name.charAt(i)>='a' && name.charAt(i)<='z')||(name.charAt(i)==' '))
            {
                flag=true;
            }
            else
                return false;
        }
        this.username=name;
        return flag;
    }
     
     /**
      * This is a setter for the cnic which will be inputted by the user. It will not just be a setter but it will also validate the 
      * present string to be containing only digits and nothing else and also that total size of the string should only be 13.
      * @param cnic String inputted by the user containing the CNIC of the user.
      * @return Boolean which returns true only when the inputted string contains only digits.
      */
     public boolean setCnic(String cnic) {
        int size=cnic.length();
        boolean flag=false;
        if(size==13)
        {
            for(int i =0;i<size;i++)
            {
                if(cnic.charAt(i)>='0' && cnic.charAt(i)<='9')
                    flag=true;
                else
                    return false;
            }   
        }
        else
            return false;
        
        this.cnic=cnic;
        return flag;
    }
    
     /**
      * This is a setter for the contact number which will be inputted by the user. It will not just be a setter but it will also validate the 
      * present string to be containing only digits and nothing else and also that total size of the string should only be 11(Pakistani Number).
      * @param contact String inputted by the user containing the Contact Number of the user.
      * @return Boolean which returns true only when the inputted string contains only digits.
      */
    public boolean setContact(String contact) {
        int size=contact.length();
        boolean flag=false;
        if(size==11)
        {
            for(int i =0;i<size;i++)
            {
                if(contact.charAt(i)>='0' && contact.charAt(i)<='9')
                    flag=true;
                else
                    return false;
            } 
            this.contact=contact;
            return flag;
        }
        else
            return false;
        
//        this.contact=contact;
//        return flag;
    }
    
    /**
     * This is a setter for the Email of the user. But it will also validate the email. It will will check all the possibilities that 
     * could occur in the code related to this field. The format it will be accepting is gmail, hotmail, yahoo.
     * @param email String containing the email entered by the user that will be validated in it.
     * @return Boolean return true only if the email is completely valid email.
     */
    public boolean setEmail(String email) {
        int size=email.length();
        boolean flag=false;
        int i=0;
        while(i<size && email.charAt(i)!='@')
        {
            if((email.charAt(i)>='A' && email.charAt(i)<='Z')||(email.charAt(i)>='a' && email.charAt(i)<='z')||(email.charAt(i)>='0' && email.charAt(i)<='9'))
            {
                flag=true;
                i++;
            }
            else
                return false;
        }
        if(i<size-1)
            i++;
        
        String rest="";
        for(int j=i;j<size;j++)
        {
            rest+=email.charAt(j);
        }
        
        if(rest.equals("gmail.com") || rest.equals("yahoo.com") || rest.equals("hotmail.com"))
            flag=true;
        else
            return false;
        
        this.email=email;
        return flag;
            
    }
    
    /**
     * this is a setter for the number of time that the user has logged into the system.
     * This thing is going to be helpful to us in the gift system.
     * @param logins integer containing the count of logins
     */
    public void setLogins(int logins) {
        this.logins = logins;
    }
    
    /**
     * this is a setter for the TPN actually this will be generated automatically. The TPN ill act as a password for the login
     * and many  more. Also it will always be a four digit code
     */
    public void setTPN() {
        Random rand= new Random();
        String str="";
        for(int i=0;i<4;i++)
        {
            int num=rand.nextInt(10);
            str+=num;
        }
        int number=Integer.parseInt(str);
        this.TPN=number;
    }
    
    /**
     * This method will helpful if the user wants to change the password and want to set his/her predefined TPN.It will
     * do it on;y after validating it.
     * @param TPN String inputted y the user that needs to be only digits
     * @return Boolean returns true only if the TPN is a 4 digit correct TPN code
     */
    public boolean updateTPN(String TPN)
    {
        int size=TPN.length();
        boolean flag=false;
        if(size==4)
        {
            for(int i=0;i<size;i++)
            {
                if(TPN.charAt(i)>='0' && TPN.charAt(i)<='9')
                    flag=true;
                else
                    return false;
            }
            
            int number = Integer.parseInt(TPN);
            this.TPN=number;
        }
        else
            return false;
        
        return flag;
    }
    
}
